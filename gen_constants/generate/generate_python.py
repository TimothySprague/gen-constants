from typing import TextIO

from ..__version__ import VERSION
from ..config import Constants


def generate(constants: Constants, f: TextIO) -> None:
    f.write(
        f'''\
# This file was auto-generated by v{VERSION} of {__package__}
'''
    )

    if constants.constants:
        f.write(
            '''
#################################################################################
# Constants
#################################################################################
'''
        )

    for constant in constants.constants:
        f.write(f'{constant.name.upper()} = {constant.value}\n')

    if constants.anonymous_enums:
        f.write(
            '''
#################################################################################
# Anonymous enums
#################################################################################
'''
        )

    for enum in constants.anonymous_enums:
        for key, value in enum.values.items():
            f.write(
                f'''\
{key.upper()} = {hex(value)}  # {value}
'''
            )

        f.write('\n')

    if constants.named_enums:
        f.write(
            '''
#################################################################################
# Named enums
#################################################################################
'''
        )

    for enum_name, enum in constants.named_enums.items():
        f.write(
            f'''
class {enum_name.replace('_', ' ').title().replace(' ', '')}:
'''
        )
        for key, value in enum.values.items():
            f.write(
                f'''\
    {key.replace('_', ' ').title().replace(' ', '')} = {hex(value)}  # {value}
'''
            )

        f.write('\n')
